# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class FlatBufferState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFlatBufferState(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatBufferState()
        x.Init(buf, n + offset)
        return x

    # FlatBufferState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlatBufferState
    def TimeSinceRest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlatBufferState
    def TotalEnergySpentSinceReset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlatBufferState
    def Actors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FlatBufferActor import FlatBufferActor
            obj = FlatBufferActor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlatBufferState
    def ActorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatBufferState
    def Observers(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FlatBufferObserver import FlatBufferObserver
            obj = FlatBufferObserver()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlatBufferState
    def ObserversLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatBufferState
    def LastStepsFrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FlatBufferState
    def RewardForLastStep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlatBufferState
    def Interrupted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def FlatBufferStateStart(builder): builder.StartObject(7)
def FlatBufferStateAddTimeSinceRest(builder, timeSinceRest): builder.PrependFloat32Slot(0, timeSinceRest, 0.0)
def FlatBufferStateAddTotalEnergySpentSinceReset(builder, totalEnergySpentSinceReset): builder.PrependFloat32Slot(1, totalEnergySpentSinceReset, 0.0)
def FlatBufferStateAddActors(builder, actors): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actors), 0)
def FlatBufferStateStartActorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FlatBufferStateAddObservers(builder, observers): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(observers), 0)
def FlatBufferStateStartObserversVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FlatBufferStateAddLastStepsFrameNumber(builder, lastStepsFrameNumber): builder.PrependInt32Slot(4, lastStepsFrameNumber, 0)
def FlatBufferStateAddRewardForLastStep(builder, rewardForLastStep): builder.PrependFloat32Slot(5, rewardForLastStep, 0.0)
def FlatBufferStateAddInterrupted(builder, interrupted): builder.PrependBoolSlot(6, interrupted, 0)
def FlatBufferStateEnd(builder): return builder.EndObject()
