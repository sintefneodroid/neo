# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Reaction

import flatbuffers

class FReaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFReaction(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FReaction()
        x.Init(buf, n + offset)
        return x

    # FReaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FReaction
    def EnvironmentName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # FReaction
    def Parameters(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .FReactionParameters import FReactionParameters
            obj = FReactionParameters()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FReaction
    def Motions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FMotion import FMotion
            obj = FMotion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FReaction
    def MotionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FReaction
    def Unobservables(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .FUnobservables import FUnobservables
            obj = FUnobservables()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FReaction
    def Configurations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .FConfiguration import FConfiguration
            obj = FConfiguration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FReaction
    def ConfigurationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FReactionStart(builder): builder.StartObject(5)
def FReactionAddEnvironmentName(builder, environmentName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(environmentName), 0)
def FReactionAddParameters(builder, parameters): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)
def FReactionAddMotions(builder, motions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(motions), 0)
def FReactionStartMotionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FReactionAddUnobservables(builder, unobservables): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(unobservables), 0)
def FReactionAddConfigurations(builder, configurations): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(configurations), 0)
def FReactionStartConfigurationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FReactionEnd(builder): return builder.EndObject()
