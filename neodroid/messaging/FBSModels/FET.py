# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class FET(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFET(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FET()
        x.Init(buf, n + offset)
        return x

    # FET
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FET
    def Transform(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .FEulerTransform import FEulerTransform
            obj = FEulerTransform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FETStart(builder): builder.StartObject(1)
def FETAddTransform(builder, transform): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(transform), 0)
def FETEnd(builder): return builder.EndObject()
