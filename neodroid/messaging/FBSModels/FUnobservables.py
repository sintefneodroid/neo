# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBS

import flatbuffers

class FUnobservables(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFUnobservables(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FUnobservables()
        x.Init(buf, n + offset)
        return x

    # FUnobservables
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FUnobservables
    def Poses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 56
            from .FQuaternionTransform import FQuaternionTransform
            obj = FQuaternionTransform()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FUnobservables
    def PosesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FUnobservables
    def Bodies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 48
            from .FBody import FBody
            obj = FBody()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FUnobservables
    def BodiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def FUnobservablesStart(builder): builder.StartObject(2)
def FUnobservablesAddPoses(builder, poses): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(poses), 0)
def FUnobservablesStartPosesVector(builder, numElems): return builder.StartVector(56, numElems, 8)
def FUnobservablesAddBodies(builder, bodies): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bodies), 0)
def FUnobservablesStartBodiesVector(builder, numElems): return builder.StartVector(48, numElems, 8)
def FUnobservablesEnd(builder): return builder.EndObject()
