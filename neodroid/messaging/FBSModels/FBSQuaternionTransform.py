# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class FBSQuaternionTransform(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBSQuaternionTransform(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBSQuaternionTransform()
        x.Init(buf, n + offset)
        return x

    # FBSQuaternionTransform
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBSQuaternionTransform
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .FBSVector3 import FBSVector3
            obj = FBSVector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBSQuaternionTransform
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .FBSQuaternion import FBSQuaternion
            obj = FBSQuaternion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FBSQuaternionTransformStart(builder): builder.StartObject(2)
def FBSQuaternionTransformAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def FBSQuaternionTransformAddRotation(builder, rotation): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)
def FBSQuaternionTransformEnd(builder): return builder.EndObject()
