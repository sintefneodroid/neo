# automatically generated by the FlatBuffers compiler, do not modify

# namespace: State

import flatbuffers

class FObjective(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFObjective(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FObjective()
        x.Init(buf, n + offset)
        return x

    # FObjective
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FObjective
    def ObjectiveName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # FObjective
    def MaxEpisodeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FObjective
    def SolvedThreshold(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def FObjectiveStart(builder): builder.StartObject(3)
def FObjectiveAddObjectiveName(builder, objectiveName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectiveName), 0)
def FObjectiveAddMaxEpisodeLength(builder, maxEpisodeLength): builder.PrependInt32Slot(1, maxEpisodeLength, 0)
def FObjectiveAddSolvedThreshold(builder, solvedThreshold): builder.PrependFloat32Slot(2, solvedThreshold, 0.0)
def FObjectiveEnd(builder): return builder.EndObject()
