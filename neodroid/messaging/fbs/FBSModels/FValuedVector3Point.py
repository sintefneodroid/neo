# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBS

import flatbuffers


class FValuedVector3Point(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsFValuedVector3Point(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FValuedVector3Point()
        x.Init(buf, n + offset)
        return x

    # FValuedVector3Point
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FValuedVector3Point
    def Val(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # FValuedVector3Point
    def Point(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .FVector3 import FVector3

            obj = FVector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return


def FValuedVector3PointStart(builder):
    builder.StartObject(2)


def FValuedVector3PointAddVal(builder, val):
    builder.PrependFloat64Slot(0, val, 0.0)


def FValuedVector3PointAddPoint(builder, point):
    builder.PrependStructSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(point), 0
    )


def FValuedVector3PointEnd(builder):
    return builder.EndObject()
